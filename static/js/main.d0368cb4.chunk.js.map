{"version":3,"sources":["HomePage.js","AboutPage.js","App.js","serviceWorker.js","index.js"],"names":["HomePage","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","convert","axios","post","datalog","datalogInput","current","value","then","response","console","log","data","translation","setState","json","JSON","stringify","catch","error","React","createRef","state","react_default","a","createElement","className","id","ref","onClick","Component","AboutPage","class","href","App","page","goToHome","goToAbout","src_HomePage_0","src_AboutPage_0","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"uUAoDeA,cA9CX,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACfE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAOVQ,QAAU,WACNC,IAAMC,KAAK,6CAA8C,CAACC,QAASV,EAAKW,aAAaC,QAAQC,QACxFC,KAAK,SAACC,GACHC,QAAQC,IAAIF,EAASG,MACrBF,QAAQC,IAAIF,EAASG,KAAKC,aAC1BnB,EAAKoB,SAAS,CACVC,KAAMC,KAAKC,UAAUR,EAASG,KAAKC,YAAa,KAAM,UAG7DK,MAAM,SAACC,GACJzB,EAAKoB,SAAS,CACVC,KAAMI,EAAMV,SAASG,UAjBjClB,EAAKW,aAAee,IAAMC,YAC1B3B,EAAK4B,MAAQ,CACTP,KAAM,IAJKrB,wEAyBf,OACI6B,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACXH,EAAAC,EAAAC,cAAA,mBAEJF,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACXH,EAAAC,EAAAC,cAAA,qBACAF,EAAAC,EAAAC,cAAA,YAAUE,GAAG,QAAQC,IAAK/B,KAAKQ,eAC/BkB,EAAAC,EAAAC,cAAA,UAAQI,QAAShC,KAAKI,SAAtB,YAEJsB,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACXH,EAAAC,EAAAC,cAAA,kBACAF,EAAAC,EAAAC,cAAA,YAAO5B,KAAKyB,MAAMP,eAzCfe,aCgBRC,0LAfP,OACIR,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,OAAKO,MAAM,UACPT,EAAAC,EAAAC,cAAA,oBAEJF,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,OAAKO,MAAM,UACPT,EAAAC,EAAAC,cAAA,oBADJ,SAEUF,EAAAC,EAAAC,cAAA,KAAGQ,KAAK,4CAAR,qDAVFH,cCkDTI,6MA9CXZ,MAAQ,CACJa,KAAM,UAGVC,SAAW,WACP1C,EAAKoB,SAAS,CACVqB,KAAM,YAIdE,UAAY,WACR3C,EAAKoB,SAAS,CACVqB,KAAM,mFAKV,IAAIA,EAEJ,OAAQtC,KAAKyB,MAAMa,MACf,IAAK,OACDA,EAAOZ,EAAAC,EAAAC,cAACa,EAAD,MACP,MACJ,IAAK,QACDH,EAAOZ,EAAAC,EAAAC,cAACc,EAAD,MAGf,OACIhB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACXH,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,UAAQI,QAAShC,KAAKuC,UAAtB,SAEJb,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,UAAQI,QAAShC,KAAKwC,WAAtB,YAIXF,UAzCCL,aCOEU,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOvB,EAAAC,EAAAC,cAACsB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM5C,KAAK,SAAA6C,GACjCA,EAAaC","file":"static/js/main.d0368cb4.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport './HomePage.css';\r\nimport axios from 'axios'\r\n\r\nclass HomePage extends Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.datalogInput = React.createRef();\r\n        this.state = {\r\n            json: ''\r\n        };\r\n    }\r\n\r\n    convert = () => {\r\n        axios.post('https://datalog-to-json.appspot.com/toJson', {datalog: this.datalogInput.current.value})\r\n            .then((response) => {\r\n                console.log(response.data);\r\n                console.log(response.data.translation);\r\n                this.setState({\r\n                    json: JSON.stringify(response.data.translation, null, '\\t')\r\n                });\r\n            })\r\n            .catch((error) => {\r\n                this.setState({\r\n                    json: error.response.data\r\n                });\r\n            });\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div className=\"center\">\r\n                    <h2>Home</h2>\r\n                </div>\r\n                <hr/>\r\n                <div className=\"center\">\r\n                    <h4>Datalog</h4>\r\n                    <textarea id=\"input\" ref={this.datalogInput}></textarea>\r\n                    <button onClick={this.convert}>Convert</button>\r\n                </div>\r\n                <hr/>\r\n                <div className=\"center\">\r\n                    <h4>JSON</h4>\r\n                    <code>{this.state.json}</code>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default HomePage;","import React, {Component} from 'react';\r\nimport './AboutPage.css';\r\n\r\nclass AboutPage extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div class=\"center\">\r\n                    <h2>About</h2>\r\n                </div>\r\n                <hr/>\r\n                <div class=\"center\">\r\n                    <h4>Github</h4>\r\n                    Link: <a href=\"https://github.com/LumingWu/datalog-json\">https://github.com/LumingWu/datalog-json</a>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default AboutPage;","import React, {Component} from 'react';\nimport './App.css';\nimport HomePage from './HomePage';\nimport AboutPage from './AboutPage';\n\nclass App extends Component {\n\n    state = {\n        page: \"Home\"\n    };\n\n    goToHome = () => {\n        this.setState({\n            page: \"Home\"\n        });\n    };\n\n    goToAbout = () => {\n        this.setState({\n            page: \"About\"\n        });\n    };\n\n    render() {\n        let page;\n\n        switch (this.state.page) {\n            case \"Home\":\n                page = <HomePage/>;\n                break;\n            case \"About\":\n                page = <AboutPage/>;\n        }\n\n        return (\n            <div className=\"App\">\n                <nav>\n                    <ul>\n                        <li>\n                            <button onClick={this.goToHome}>Home</button>\n                        </li>\n                        <li>\n                            <button onClick={this.goToAbout}>About</button>\n                        </li>\n                    </ul>\n                </nav>\n                {page}\n            </div>\n        );\n    }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}